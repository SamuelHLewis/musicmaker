from music21 import note, chord, converter, stream, duration, instrument

def read_midi(midi:str) -> dict:
    """Read a midi file and extract the notes and pitches.
    Args:
        midi: the name of the midi file.
    Returns:
        midi_contents: the notes and pitches from the midi file.
    """
    notes = []
    durations = []
    parser = converter

    original_score = parser.parse(midi).chordify()
    
    for element in original_score.flat:
        if isinstance(element, note.Note):
            if element.isRest:
                notes.append(str(element.name))
                durations.append(element.duration.quarterLength)
            else:
                notes.append(str(element.nameWithOctave))
                durations.append(element.duration.quarterLength)
        
        if isinstance(element, chord.Chord):
            notes.append('.'.join(n.nameWithOctave for n in element.pitches))
            durations.append(element.duration.quarterLength)
    
    midi_contents = {
        'notes': notes,
        'durations': durations
    }

    return midi_contents

def write_midi(notes_and_durations:dict, outname:str) -> None:
    """Write a midi file to disk based on a set of notes and pitches.
    Args:
        notes_and_durations: the notes and their durations.
        outname: the name of the MIDI file to write.
    """
    midi_stream = stream.Stream()

    # create note and chord objects based on the values generated by the model
    for pattern in range(len(notes_and_durations['notes'])):
        note_pattern = notes_and_durations['notes'][pattern]
        duration_pattern = notes_and_durations['durations'][pattern]
        # pattern is a chord
        if ('.' in note_pattern):
            notes_in_chord = note_pattern.split('.')
            chord_notes = []
            for current_note in notes_in_chord:
                new_note = note.Note(current_note)
                new_note.duration = duration.Duration(duration_pattern)
                new_note.storedInstrument = instrument.Piano()
                chord_notes.append(new_note)
            new_chord = chord.Chord(chord_notes)
            midi_stream.append(new_chord)
        elif note_pattern == 'rest':
        # pattern is a rest
            new_note = note.Rest()
            new_note.duration = duration.Duration(duration_pattern)
            new_note.storedInstrument = instrument.Piano()
            midi_stream.append(new_note)
        elif note_pattern != 'START':
        # pattern is a note
            new_note = note.Note(note_pattern)
            new_note.duration = duration.Duration(duration_pattern)
            new_note.storedInstrument = instrument.Piano()
            midi_stream.append(new_note)

    midi_stream = midi_stream.chordify()
    midi_stream.write('midi', fp=outname)
    print("Midi file written to {}".format(outname))